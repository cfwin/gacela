<?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-10-01 at 11:00:20.
 */
class GacelaTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Gacela
     */
    protected $object;

	/**
	 * @var \Memcache
	 */
	protected $memcache = null;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = Gacela::instance();

		$this->memcache = new Memcache;

		$this->memcache->addServer('127.0.0.1', 11211);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
		Gacela::reset();

		$this->memcache->flush();
    }

	public function providerGetField()
	{
		return array(
			array('Binary'),
			array('Bool'),
			array('Date'),
			array('Decimal'),
			array('Enum'),
			array('Float'),
			array('Int'),
			array('Set'),
			array('String'),
			array('Time')
		);
	}

    /**
     * @covers Gacela::instance
     * @todo   Implement testInstance().
     */
    public function testInstance()
    {
        $this->assertInstanceOf('Gacela', Gacela::instance());
    }

    /**
     * @covers Gacela::autoload
     * @todo   Implement testAutoload().
     */
    public function testAutoload()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Gacela::cacheMetaData
     */
    public function testCacheMetaDataWithoutMemcache()
    {
		$array = array(
			array('var1' => 1, 'var2' => 2, 'var3' => 3),
			array('var1' => 999, 'var2' => 'something else', 'var3' => 'more')
		);

        $this->object->cacheMetaData('test', $array);

		$this->assertEquals($array, $this->object->cacheMetaData('test'));
    }

	/**
	 * @covers Gacela::cacheMetaData
	 */
	public function testCacheMetaDataWithMemcache()
	{
		$array = array(
			array('var1' => 1, 'var2' => 2, 'var3' => 3),
			array('var1' => 999, 'var2' => 'something else', 'var3' => 'more')
		);

		$this->object->enableCache($this->memcache);

		$this->object->cacheMetaData('test', $array);

		$this->assertSame($array, $this->object->cacheMetaData('test'));
	}

    /**
     * @covers Gacela::configPath
     * @todo   Implement testConfigPath().
     */
    public function testConfigPath()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Gacela::enableCache
     * @todo   Implement testEnableCache().
     */
    public function testEnableCache()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Gacela::getDataSource
     * @todo   Implement testGetDataSource().
     */
    public function testGetDataSource()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

	/**
	 * @param $type
	 * @dataProvider providerGetField
	 */
	public function testGetField($type)
	{
		$this->assertInstanceOf("\\Gacela\\Field\\".$type, $this->object->getField($type));
	}

    /**
     * @covers Gacela::loadConfig
     * @todo   Implement testLoadConfig().
     */
    public function testLoadConfig()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Gacela::loadMapper
     * @todo   Implement testLoadMapper().
     */
    public function testLoadMapper()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Gacela::makeCollection
     * @todo   Implement testMakeCollection().
     */
    public function testMakeCollection()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Gacela::registerDataSource
     * @todo   Implement testRegisterDataSource().
     */
    public function testRegisterDataSource()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Gacela::registerNamespace
     */
    public function testRegisterNamespace()
    {
		$array = array(
			array('Test1', __DIR__, __DIR__.'/'),
			array('App', '/var/www/app/', '/var/www/app/')

		);

		$expected = array('Gacela' => '/var/www/gacela/library/Gacela/');

		foreach($array as $ns) {
			$this->object->registerNamespace($ns[0], $ns[1]);

			$expected[$ns[0]] = $ns[2];
		}

		$this->assertAttributeSame($expected, '_namespaces', $this->object);
    }
}
